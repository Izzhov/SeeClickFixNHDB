/*
 * GUI class for SeeClickFix project
 * CS437 Introduction to Databases
 * Final Project
 * Fall 2016
 * Much of the code below was auto-generated by the NetBeans IDE
 */

package seeclickfixgui;

import java.sql.*;
import java.util.*;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.RowSorter.SortKey;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator; 
/**
 *
 * @author Will, Kyle, Emon
 */
public class SeeClickFixUI extends javax.swing.JFrame {

    /**
     * Creates new form SeeClickFixUI
     */
    public SeeClickFixUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        issuesPopup = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        dateLabel = new javax.swing.JLabel();
        nfsLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        neighborhoodSelect = new javax.swing.JPanel();
        StartDateSelector = new datechooser.beans.DateChooserCombo();
        EndDateSelector = new datechooser.beans.DateChooserCombo();
        jScrollPane1 = new javax.swing.JScrollPane();
        AllNeighborhoods = new javax.swing.JList<>();
        AddNeighborhood = new javax.swing.JButton();
        RemoveNeighborhood = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        SelectedNeighborhoods = new javax.swing.JList<>();
        RunButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        backButtonNeighborhood = new javax.swing.JButton();
        addAllNeighborhoods = new javax.swing.JButton();
        removeAllNeighborhoods = new javax.swing.JButton();
        neighborhoodSortColumnSelect = new javax.swing.JComboBox<>();
        neighborhoodSortDirSelect = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        addressSelect = new javax.swing.JPanel();
        backButtonAddress = new javax.swing.JButton();
        addressSelectPrompt = new javax.swing.JLabel();
        addressSelectComboBox = new javax.swing.JComboBox(new Object[] {"1st Avenue", "1st Street", "2nd Street", "3rd Street", "4th Street",
            "5th Street", "6th Street", "Academy Street", "Adeline Street",
            "Admiral Street", "Alabama Street", "Alden Avenue", "Alfred Street",
            "Allen Place", "Alston Avenue", "Alton Street", "Amistad Street",
            "Anderson Street", "Anita Street", "Anthony Street", "Arch Street",
            "Arden Street", "Argonne Street", "Artizan Street", "Ashland Place",
            "Ashmun Street", "Assumption Street", "Asylum Street", "Atwater Street",
            "Auburn Street", "Audubon Court", "Audubon Street", "Austin Street",
            "Autumn Street", "Avon Street", "Barclay Street", "Barnes Avenue",
            "Barnett Street", "Bassett Street", "Batter Terrace", "Beacon Avenue",
            "Beaver Hill Lane", "Beecher Place", "Beechwood Lane", "Beers Street",
            "Bellevue Road", "Benton Street", "Beverly Road", "Bishop Street",
            "Blake Street", "Blatchley Avenue", "Boston Avenue", "Boston Post Road",
            "Bradley Street", "Brewery Square", "Brewery Street", "Brewster Street",
            "Bright Street", "Bristol Place", "Bristol Street", "Broadway",
            "Brooklawn Circle", "Brookside Avenue", "Brownell Street", "Brown Street",
            "Burns Street", "Burr Street", "Burton Street", "Burwell Street",
            "Butler Street", "Button Street", "Cabot Street", "Canal Street",
            "Canner Street", "Carlisle Street", "Carmel Street", "Carroll Street",
            "Castle Street", "Cave Street", "Cedar Hill Avenue", "Cedar Street",
            "Center Street", "Central Avenue", "Chambers Street", "Chapel Street",
            "Charles Street", "Chatham Street", "Cherry Ann Street", "Chester Street",
            "Chestnut Street", "Church Street", "Church Street South", "Cinque Green",
            "Clarendon Street", "Clark Street", "Clay Street", "Cleveland Road",
            "Cliff Street", "Clifton Street", "Clinton Avenue", "Clinton Place",
            "Clover Place", "Cold Spring Street", "College Street", "Colonial Place",
            "Colony Road", "Columbus Avenue", "Compton Street", "Concord Street",
            "Congress Avenue", "Connecticut 10", "Connecticut 103", "Connecticut 122",
            "Connecticut 243", "Connecticut 34", "Connecticut 63", "Connecticut Avenue",
            "Conrad Drive", "Constance Baker Motley Street", "Cooper Place",
            "Cora Street", "Cottage Street", "County Street", "Court Street",
            "Cove Street", "Cranston Street", "Crescent Street", "Crofton Street",
            "Crown Street", "Daisy Street", "Daniel Drive", "Davenport Avenue",
            "Davis Street", "Day Street", "Dayton Street", "Dean Street", "Dell Drive",
            "Derby Avenue", "Dewitt Street", "Diamond Street", "Dickerman Street",
            "Division Street", "Dixwell Avenue", "Donna Drive", "Dorchester Terrace",
            "Dorman Street", "Douglass Avenue", "Dover Street", "Downing Street",
            "Dwight Street", "Dyer Street", "Eagle Street", "Earl Street",
            "Eastern Street", "East Grand Avenue", "East Pearl Street",
            "East Rock Road", "East Street", "Edgehill Road", "Edgewood Avenue",
            "Edgewood Way", "Edwards Street", "Elaine Terrace", "Eldridge Street",
            "Eld Street", "Elizabeth Ann Drive", "Elizabeth Street",
            "Ella T Grasso Boulevard", "Elliot Street", "Ellsworth Avenue",
            "Elmer Street", "Elm Street", "Emerson Street", "Emily Road",
            "Englewood Drive", "English Street", "Essex Street", "Everit Street",
            "Exchange Street", "Fairfield Street", "Fairmont Avenue", "Fair Street",
            "Farnham Avenue", "Ferry Street", "Fillmore Street", "Fitch Street",
            "Flint Street", "Florence Avenue", "Forbes Avenue", "Forest Road",
            "Fort Hale Park Road", "Fort Hale Road", "Foster Street", "Fountain Street",
            "Fountain Terrace", "Fournier Street", "Fowler Street", "Foxon Boulevard",
            "Foxon Hill Road", "Foxon Street", "Fox Street", "Frances Hunter Drive",
            "Franklin Street", "Frank Street", "Frederick Street", "Front Street",
            "Fulton Street", "Gando Drive", "Garden Street", "George Street",
            "Gibbs Street", "Gilbert Avenue", "Gilbert Street", "Girard Avenue",
            "Glen Haven Road", "Glen Road", "Glenview Terrace", "Goffe Street",
            "Goffe Terrace", "Goodyear Street", "Grace Street", "Grafton Street",
            "Grand Avenue", "Greene Street", "Green Hill Terrace", "Greenwich Avenue",
            "Greenwood Street", "Grove Street", "Hallock Avenue", "Hallock Street",
            "Hall Street", "Harding Place", "Hard Street", "Harper Avenue",
            "Harrington Avenue", "Harrison Street", "Haven Street", "Hazel Street",
            "Hemingway Place", "Hemingway Street", "Hemlock Road", "Henry Street",
            "Hervey Street", "Highland Street", "High Street", "Highview Lane",
            "Hillhouse Avenue", "Hillside Avenue", "Hilltop Road", "Hine Place",
            "Hobart Street", "Horsley Avenue", "Hotchkiss Street", "Houston Street",
            "Howard Avenue", "Howard Street", "Howe Street", "Hubinger Street",
            "Hughes Place", "Humphrey Street", "Huntington Avenue", "Huntington Road",
            "Huntington Street", "Hurlburt Street", "Hyde Street", "Irving Street",
            "Irvington Street", "Ives Place", "Ivy Street", "James Street",
            "Jefferson Street", "Jewell Street", "Johnston Street", "John Street",
            "John W Murphy Drive", "Judith Terrace", "Judson Avenue", "Judwin Avenue",
            "Kenny Drive", "Kensington Street", "Kenter Place", "Kimberly Avenue",
            "King Place", "Kneeland Road", "Knollwood Drive", "Kossuth Street",
            "Lafayette Street", "Lake Place", "Lakeview Terrace", "Lamberton Street",
            "Lancraft Street", "Laura Lane", "Laurel Road", "Lawncrest Road",
            "Lawrence Street", "Legend Lane", "Legion Avenue", "Leila Street",
            "Lenox Street", "Leroy Terrace", "Lewis Street", "Lexington Avenue",
            "Ley Street", "Liberty Street", "Lighthouse Point Terrace",
            "Lighthouse Road", "Lilac Street", "Limerick Street", "Lincoln Street",
            "Lincoln Way", "Linden Street", "Livingston Street", "Lloyd Street",
            "Lombard Street", "Long Wharf Drive", "Loomis Place", "Loop Road",
            "Lowin Avenue", "Lynwood Place", "Lyon Street", "Main Street",
            "Main Street Annex", "Maltby Place", "Maltby Street", "Mansfield Street",
            "Mansion Street", "Maple Street", "Maplewood Road", "Marion Street",
            "Marlin Drive", "Martin Luther King Jr. Boulevard", "Marvel Road",
            "Massachusetts Avenue", "McKinley Avenue", "Meadow Street",
            "Meadow View Road", "Mead Street", "Mechanic Street", "Melrose Drive",
            "Middletown Avenue", "Mill River Street", "Mill Street", "Milton Street",
            "Minor Street", "Mitchell Drive", "Monroe Street", "Morris Avenue",
            "Morris Causeway", "Morris Cove Road", "Morris Street", "Morse Place",
            "Morton Lane", "Mountain Top Lane", "Munson Street", "Myron Street",
            "Nash Street", "Nelson Street", "Newhall Street", "Nicoll Street",
            "North Bank Street", "North Frontage Road", "Norton Parkway",
            "Norton Street", "Norwood Road", "Oakley Street", "Oak Ridge Drive",
            "Oak Street", "Oak Street Connector", "Ocean View Street", "Ogden Street",
            "Oliver Road", "Olive Street", "Orange Street", "Orchard Street",
            "Osborn Avenue", "Osborn Street", "Oxford Street", "Palmieri Avenue",
            "Pardee Place", "Pardee Street", "Parker Place", "Park Lane",
            "Parkside Drive", "Park Street", "Parmelee Avenue", "Pawtucket Street",
            "Pearl Street", "Peat Meadow Road", "Peck Alley", "Peck Street",
            "Pelham Lane", "Pendleton Street", "Perkins Street", "Philip Street",
            "Pierpont Street", "Pine Street", "Pitkin Street Tunnel", "Plant Street",
            "Platt Street", "Pleasant Street", "Plymouth Street", "Pond Lily Avenue",
            "Pond Street", "Pope Street", "Poplar Street", "Porter Street",
            "Portland Street", "Portsea Street", "Prince Street", "Prospect Avenue",
            "Prospect Street", "Putnam Street", "Quinnipiac Avenue", "Ramsdell Street",
            "Raynham Road", "Ray Road", "Read Street", "Redfield Street",
            "Reservoir Street", "Revere Street", "Rhea Street", "Richard Street",
            "Richmond Avenue", "Ridge Street", "River Street", "Rock Creek Road",
            "Rock Hill Road", "Rock Street", "Rock View Terrace", "Roger Road",
            "Roger White Drive", "Roosevelt Street", "Rosette Street",
            "Rosewood Avenue", "Route 1", "Rowe Street", "Roydon Road", "Ruby Street",
            "Runo Terrace", "Russell Street", "Sachem Street", "Saint John Street",
            "Saint Peters Street", "Saint Ronan Street", "Salem Street",
            "Saltonstall Avenue", "Sargent Drive", "Science Park", "Scranton Street",
            "Sea Street", "Seneca Road", "Sheffield Avenue", "Sheldon Terrace",
            "Shelter Street", "Shelton Avenue", "Sherland Avenue", "Sherman Avenue",
            "Sherman Parkway", "Shoreham Road", "Smith Avenue", "Sound View Terrace",
            "South End Road", "South Frontage Road", "South Orange Street",
            "South Wallace Street", "South Water Street", "Spencer Place",
            "Sperry Street", "Springside Avenue", "Spring Street", "Stanley Street",
            "Starr Street", "State Street", "Stevenson Road", "Stevens Street",
            "Stimson Road", "Strong Street", "Stuyvesant Avenue", "Summit Street",
            "Sylvan Avenue", "Taylor Avenue", "Temple Court", "Temple Street",
            "Terrace Street", "Thompson Street", "Tilton Street", "Tolli Terrace",
            "Tour Avenue", "Tower Parkway", "Townsend Avenue", "Townsend Street",
            "Townsend Terrace", "Truman Street", "Trumbull Street", "Tuttle Drive",
            "Tuttle Street", "Union Avenue", "Union Street", "University Place",
            "Upson Terrace", "U.S. 5", "Valley Place North", "Valley Street",
            "Vernon Street", "Victory Drive", "View Street", "Vine Street",
            "Vision Trail", "Vista Terrace", "Wallace Street", "Wall Street",
            "Walnut Street", "Ward Street", "Warren Place", "Warren Street",
            "Warwick Street", "Washington Avenue", "Waterfront Street", "Water Street",
            "Watson Street", "Webster Street", "Welcome Street", "Welton Street",
            "Westbrook Lane", "West Division Street", "West Elm Street",
            "Westerleigh Road", "West Hazel Street", "West Hills Road",
            "West Ivy Street", "West Park Avenue", "West Prospect Street",
            "West Read Street", "West Rock Avenue", "West Street", "Westwood Road",
            "Weybosset Street", "Whalley Avenue", "White Street", "Whitney Avenue",
            "Whittier Road", "Whittlesey Avenue", "Wilcox Place", "Willard Street",
            "William Street", "Willis Street", "Willow Street", "Wilmot Road",
            "Wilson Street", "Winchester Avenue", "Wintergreen Avenue",
            "Winthrop Avenue", "Wolcott Street", "Woodbridge Avenue", "Woodland Street",
            "Woodside Terrace", "Woodward Avenue", "Woolsey Street", "Wooster Place",
            "Wooster Street", "Wright Avenue", "Yale Avenue", "York Street",
            "Young Street"});
    addressAddButton = new javax.swing.JButton();
    jScrollPane4 = new javax.swing.JScrollPane();
    selectedAddresses = new javax.swing.JList<>();
    jLabel5 = new javax.swing.JLabel();
    addressesRemoveSelected = new javax.swing.JButton();
    addressesRemoveAll = new javax.swing.JButton();
    addressStartDate = new datechooser.beans.DateChooserCombo();
    addressEndDate = new datechooser.beans.DateChooserCombo();
    jLabel7 = new javax.swing.JLabel();
    jLabel8 = new javax.swing.JLabel();
    addressesRunButton = new javax.swing.JButton();
    jLabel10 = new javax.swing.JLabel();
    jLabel11 = new javax.swing.JLabel();
    addressSortColumnSelect = new javax.swing.JComboBox<>();
    addressSortDirSelect = new javax.swing.JComboBox<>();
    startSplash = new javax.swing.JPanel();
    label1 = new java.awt.Label();
    byNeighborhood = new javax.swing.JButton();
    byAddress = new javax.swing.JButton();

    issuesPopup.setTitle("Issues");
    issuesPopup.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    issuesPopup.setFocusable(false);
    issuesPopup.setIconImage(null);
    issuesPopup.setMinimumSize(new java.awt.Dimension(725, 375));
    issuesPopup.setType(java.awt.Window.Type.POPUP);

    jScrollPane2.setPreferredSize(new java.awt.Dimension(452, 350));
    jScrollPane2.setWheelScrollingEnabled(false);

    resultsTable.setAutoCreateRowSorter(true);
    TableRowSorter<TableModel> sorter = new TableRowSorter<>(resultsTable.getModel());
    resultsTable.setRowSorter(sorter);
    List<SortKey> sortKeys = new ArrayList<>();

    int columnIndexToSort = 1;
    sorter.sort();
    resultsTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null},
            {null, null, null, null}
        },
        new String [] {
            "Issue Type", "Total Issues", "Total Issue Time", "Average Issue Time"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }
    });
    resultsTable.setFillsViewportHeight(true);
    jScrollPane2.setViewportView(resultsTable);

    dateLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    dateLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    dateLabel.setText("<html>In the date range:");
    dateLabel.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

    nfsLabel.setText("jLabel5");
    nfsLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
    jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    jLabel6.setText("<html>You are viewing the issues for these areas:");
    jLabel6.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

    javax.swing.GroupLayout issuesPopupLayout = new javax.swing.GroupLayout(issuesPopup.getContentPane());
    issuesPopup.getContentPane().setLayout(issuesPopupLayout);
    issuesPopupLayout.setHorizontalGroup(
        issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(issuesPopupLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(issuesPopupLayout.createSequentialGroup()
                    .addComponent(nfsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                .addGroup(issuesPopupLayout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(33, Short.MAX_VALUE))
        .addGroup(issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(issuesPopupLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(499, Short.MAX_VALUE)))
    );
    issuesPopupLayout.setVerticalGroup(
        issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, issuesPopupLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(issuesPopupLayout.createSequentialGroup()
                    .addComponent(nfsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(9, 9, 9)
                    .addComponent(dateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(680, 680, 680))
        .addGroup(issuesPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(issuesPopupLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(932, Short.MAX_VALUE)))
    );

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setBounds(new java.awt.Rectangle(0, 0, 0, 0));

    neighborhoodSelect.setBorder(javax.swing.BorderFactory.createTitledBorder("SeeClickFix"));

    AllNeighborhoods.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Neighborhoods in New Haven", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
    AllNeighborhoods.setModel(new javax.swing.AbstractListModel<String>() {
        String[] strings = { "Amity", "Annex", "Beaver Hills", "Dixwell", "Downtown", "Dwight", "East Rock", "East Shore", "Edgewood", "Fair Haven", "Fair Haven Heights", "Hill", "Long Wharf", "Newhallville", "Prospect Hill", "Quinnipiac Meadows", "West River", "West Rock", "Westville", "Wooster Square/Mill River" };
        public int getSize() { return strings.length; }
        public String getElementAt(int i) { return strings[i]; }
    });
    AllNeighborhoods.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    AllNeighborhoods.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
    AllNeighborhoods.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            AllNeighborhoodsMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(AllNeighborhoods);

    AddNeighborhood.setText("Add Selected");
    AddNeighborhood.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AddNeighborhoodActionPerformed(evt);
        }
    });

    RemoveNeighborhood.setText("Remove Selected");
    RemoveNeighborhood.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            RemoveNeighborhoodActionPerformed(evt);
        }
    });

    jLabel1.setText("Please select the neighborhood(s) to test, and a date range.");

    SelectedNeighborhoods.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Neighborhood(s) Selected", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
    SelectedNeighborhoods.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
    SelectedNeighborhoods.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            SelectedNeighborhoodsMouseClicked(evt);
        }
    });
    jScrollPane3.setViewportView(SelectedNeighborhoods);

    RunButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    RunButton.setText("Run!");
    RunButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            RunButtonActionPerformed(evt);
        }
    });

    jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel2.setText("Start Date:");

    jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel3.setText("End Date:");

    backButtonNeighborhood.setText("Go Back");
    backButtonNeighborhood.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backButtonNeighborhoodActionPerformed(evt);
        }
    });

    addAllNeighborhoods.setText("Add All");
    addAllNeighborhoods.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addAllNeighborhoodsActionPerformed(evt);
        }
    });

    removeAllNeighborhoods.setText("Remove All");
    removeAllNeighborhoods.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            removeAllNeighborhoodsActionPerformed(evt);
        }
    });

    neighborhoodSortColumnSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Issue Type", "Total Issues", "Total Issue Time", "Average Issue Time" }));

    neighborhoodSortDirSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));

    jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel4.setText("Sort by Attribute:");

    jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel9.setText("Sort Direction:");

    javax.swing.GroupLayout neighborhoodSelectLayout = new javax.swing.GroupLayout(neighborhoodSelect);
    neighborhoodSelect.setLayout(neighborhoodSelectLayout);
    neighborhoodSelectLayout.setHorizontalGroup(
        neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(neighborhoodSelectLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 455, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(backButtonNeighborhood, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(StartDateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(EndDateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(96, 96, 96)))
                        .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                            .addComponent(AddNeighborhood)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addAllNeighborhoods)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neighborhoodSelectLayout.createSequentialGroup()
                            .addComponent(removeAllNeighborhoods)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(RemoveNeighborhood))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, neighborhoodSelectLayout.createSequentialGroup()
                            .addComponent(RunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(135, 135, 135)
                            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(neighborhoodSortColumnSelect, 0, 173, Short.MAX_VALUE)
                                    .addComponent(neighborhoodSortDirSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jLabel9))
                            .addGap(91, 91, 91)))))
            .addContainerGap())
    );
    neighborhoodSelectLayout.setVerticalGroup(
        neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(neighborhoodSelectLayout.createSequentialGroup()
            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(backButtonNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(31, 31, 31)
            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
            .addGap(18, 18, 18)
            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(RemoveNeighborhood)
                .addComponent(AddNeighborhood)
                .addComponent(addAllNeighborhoods)
                .addComponent(removeAllNeighborhoods))
            .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                    .addGap(111, 111, 111)
                    .addComponent(RunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                    .addGap(39, 39, 39)
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel4))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(StartDateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(neighborhoodSortColumnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(neighborhoodSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(EndDateSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(neighborhoodSelectLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(neighborhoodSortDirSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
            .addContainerGap())
    );

    addressSelect.setBorder(javax.swing.BorderFactory.createTitledBorder("SeeClickFix"));
    addressSelect.setMinimumSize(new java.awt.Dimension(0, 0));
    addressSelect.setPreferredSize(new java.awt.Dimension(976, 478));

    backButtonAddress.setText("Go Back");
    backButtonAddress.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            backButtonAddressActionPerformed(evt);
        }
    });

    addressSelectPrompt.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    addressSelectPrompt.setText("Please enter the address(es) you would like to search.");

    addressSelectComboBox.setEditable(true);
    AutoCompleteDecorator.decorate(addressSelectComboBox);
    addressSelectComboBox.setSelectedItem("");
    addressSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addressSelectComboBoxActionPerformed(evt);
        }
    });

    addressAddButton.setText("Add");
    addressAddButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addressAddButtonActionPerformed(evt);
        }
    });

    selectedAddresses.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selected Addresses", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
    jScrollPane4.setViewportView(selectedAddresses);

    jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel5.setText("Search Bar");

    addressesRemoveSelected.setText("Remove Selection");
    addressesRemoveSelected.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addressesRemoveSelectedActionPerformed(evt);
        }
    });

    addressesRemoveAll.setText("Remove All");
    addressesRemoveAll.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addressesRemoveAllActionPerformed(evt);
        }
    });

    jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel7.setText("Start Date");

    jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel8.setText("End Date");

    addressesRunButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    addressesRunButton.setText("Run!");
    addressesRunButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addressesRunButtonActionPerformed(evt);
        }
    });

    jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel10.setText("Sort by Attribute:");

    jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
    jLabel11.setText("Sort Direction:");

    addressSortColumnSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Issue Type", "Total Issues", "Total Issue Time", "Average Issue Time" }));

    addressSortDirSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ascending", "Descending" }));

    javax.swing.GroupLayout addressSelectLayout = new javax.swing.GroupLayout(addressSelect);
    addressSelect.setLayout(addressSelectLayout);
    addressSelectLayout.setHorizontalGroup(
        addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addressSelectLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(addressSelectLayout.createSequentialGroup()
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addressSelectComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addressSelectPrompt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addressSelectLayout.createSequentialGroup()
                            .addComponent(addressAddButton)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(backButtonAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(addressStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(addressEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                    .addGap(0, 194, Short.MAX_VALUE)
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                            .addComponent(addressesRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(151, 151, 151)
                            .addComponent(addressesRemoveSelected)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(addressesRemoveAll))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                            .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel10)
                                .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addressSortColumnSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addressSortDirSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel11))
                            .addGap(577, 577, 577)))))
            .addContainerGap())
    );
    addressSelectLayout.setVerticalGroup(
        addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(addressSelectLayout.createSequentialGroup()
            .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(backButtonAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addressSelectPrompt))
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(addressSelectLayout.createSequentialGroup()
                            .addGap(83, 83, 83)
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(addressSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(addressAddButton))
                            .addGap(39, 39, 39)
                            .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addressSelectLayout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addressStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel8)
                                    .addGap(2, 2, 2)
                                    .addComponent(addressEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(addressSelectLayout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addressSortColumnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(12, 12, 12)
                                    .addComponent(jLabel11)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addressSortDirSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(addressSelectLayout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(addressSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addressesRemoveAll)
                        .addComponent(addressesRemoveSelected))
                    .addGap(0, 63, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addressSelectLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(addressesRunButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );

    startSplash.setBorder(javax.swing.BorderFactory.createTitledBorder("SeeClickFix"));
    startSplash.setMaximumSize(new java.awt.Dimension(976, 478));
    startSplash.setMinimumSize(new java.awt.Dimension(976, 478));
    startSplash.setPreferredSize(new java.awt.Dimension(976, 478));

    label1.setText("Welcome to the SeeClickFix New Haven database.  Would you like to search for issues by neighborhood or by street address?");

    byNeighborhood.setText("By neighborhood");
    byNeighborhood.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            byNeighborhoodActionPerformed(evt);
        }
    });

    byAddress.setText("By address");
    byAddress.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            byAddressActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout startSplashLayout = new javax.swing.GroupLayout(startSplash);
    startSplash.setLayout(startSplashLayout);
    startSplashLayout.setHorizontalGroup(
        startSplashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(startSplashLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
            .addContainerGap())
        .addGroup(startSplashLayout.createSequentialGroup()
            .addGap(130, 130, 130)
            .addComponent(byNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(byAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(140, 140, 140))
    );
    startSplashLayout.setVerticalGroup(
        startSplashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(startSplashLayout.createSequentialGroup()
            .addContainerGap()
            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(55, 55, 55)
            .addGroup(startSplashLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(byNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(byAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(321, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(neighborhoodSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(addressSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 10, Short.MAX_VALUE)
                .addComponent(startSplash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE)))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(neighborhoodSelect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addContainerGap())
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(addressSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(startSplash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)))
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    //run query on the DB with the specified parameters
    private void RunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunButtonActionPerformed
        String entry, startDate, endDate, neighborhoodFormattedString = "";
        String neighborhoodQuery = "";
        
        //grab sorting attributes
        int sortColumn, sortOrder;
        String sortColumnString = neighborhoodSortColumnSelect.getSelectedItem().toString();
        if( sortColumnString.compareTo("Average Issue Time") == 0 ) {
            sortColumn = 3;
        } else if( sortColumnString.compareTo("Total Issues") == 0 ) {
            sortColumn = 1;
        } else if( sortColumnString.compareTo("Total Issue Time") == 0 ) {
            sortColumn = 2;
        } else { sortColumn = 0; }
        
        String sortOrderString = neighborhoodSortDirSelect.getSelectedItem().toString();
        sortOrder = ( sortOrderString.compareTo("Ascending") == 0 ) ? 0 : 1;
        
        int size = SelectedNeighborhoods.getModel().getSize();
        ArrayList neighborhoods = new ArrayList(22);
        
        //put together a string of all the selected neighborhoods
        //also make a string to use in the neighborhood-specification in the SQL query
        for (int i = 0; i < size; i++) {
            if(i != 0) neighborhoodQuery = neighborhoodQuery + " OR ";
            entry = SelectedNeighborhoods.getModel().getElementAt(i);
            neighborhoodQuery = neighborhoodQuery + "neighborhood = '" + entry +"'";
            //System.out.print(" " + entry);]
            neighborhoods.add(entry);
            neighborhoodFormattedString += ( entry );
            if(i < size - 1 ) { neighborhoodFormattedString += ", "; }
        }
        
        //get the start and end dates
        startDate =  StartDateSelector.getText();
        endDate = EndDateSelector.getText();
        
        //convert the start and end dates to SQL timestamp format
        //first insert zeroes into start month and day where needed
        if(startDate.indexOf("/") < 2) startDate = "0" + startDate;
        if(endDate.indexOf("/") < 2) endDate = "0" + endDate;
        if(startDate.substring(startDate.indexOf("/") + 1).indexOf("/")  + startDate.indexOf("/") + 1 < 5)
            startDate = startDate.substring(0,3) + "0" + startDate.substring(3);
        if(endDate.substring(endDate.indexOf("/") + 1).indexOf("/")  + endDate.indexOf("/") + 1 < 5)
            endDate = endDate.substring(0,3) + "0" + endDate.substring(3);
        //now rearrange mm/dd/yy to yyyy/mm/dd h
        String startDateSQL = "'20" + startDate.substring(6) + "-" + startDate.substring(0,2) + "-" + startDate.substring(3,5) + " 00:00:00'";
        //need to tell SQL to add a day to end date so end date issues are included
        String endDateSQL = "(timestamp '20" + endDate.substring(6) + "-" + endDate.substring(0,2) + "-" + endDate.substring(3,5) + " 00:00:00' + interval '1 day 00:00:00')";
        
        //debugging print statements
        System.out.println("You selected the neighborhoods: " + neighborhoods);
        System.out.println("You selected the date range: "
                + startDate + " to "
                + endDate);
        System.out.println( "With sort parameters: " + sortColumn + ", " + sortOrder );
        
        //connect to the SQL server
        establishConnection();
        
        //perform the query and store the results in rs
        ResultSet rs = performQuery(startDateSQL, endDateSQL, neighborhoodQuery, sortColumn, sortOrder);
        
        //declare the table columns
        LinkedList issues = new LinkedList();
        LinkedList issueNum = new LinkedList();
        LinkedList issueTime = new LinkedList();
        LinkedList issueAvgTime = new LinkedList();
        
        try {
        while (rs.next())
        {
            issues.add(rs.getString("name"));
            issueNum.add(Integer.parseInt(rs.getString("num_issues")));
            issueTime.add(rs.getString("tot_issue_time"));
            issueAvgTime.add(rs.getString("avg_issue_time"));
        }
        } catch(Exception e)
        {
            System.out.println("Problem when analyzing query result.");
        }
        
        //close connection to SQL server
        closeConnection();
        
        Object[][] obj = new Object[issues.size()][4]; //for making the table in the popup
        
        //initialize the table 
        for(int i = 0; i < issues.size(); i++) {
            obj[i][0] = issues.get(i);
            obj[i][1] = issueNum.get(i);
            obj[i][2] = issueTime.get(i);
            obj[i][3] = issueAvgTime.get(i);
        }
        
        nfsLabel.setText("<html>" + neighborhoodFormattedString);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel( obj,
            new String [] {
                "Issue Type", "Total Issues", "Total Issue Time", "Avg Issue Time"
            })
        ); 
        
        dateLabel.setText("<html>In the date range: " + startDate + " to " + endDate);
        issuesPopup.setVisible(true);   
    }//GEN-LAST:event_RunButtonActionPerformed

    //pushing the add neighborhood button will grab the selected item from the 
    //list of all neighborhoods and add it to the list of selected ones
    private void AddNeighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddNeighborhoodActionPerformed
        String selected = AllNeighborhoods.getSelectedValue();
        if(selected == null) { return; } //the button was pressed, but nothing
                                         //was selected
        int size = SelectedNeighborhoods.getModel().getSize();
        String entry;       
        String[] allEntries = new String[size + 1];
        
        //build a list of everything currently in the selected list
        for (int i = 0; i < size; i++) {
            entry = SelectedNeighborhoods.getModel().getElementAt(i);
            //check to make sure the entry hasn't already been added
            if( entry.equals( selected ) ) { return; }
            allEntries[i] = entry;
        }
        //add the new neighborhood to the end of the list
        allEntries[size] = selected;
        //set the selected list to be the new updated version
        Arrays.sort(allEntries);
        SelectedNeighborhoods.setListData( allEntries );
    }//GEN-LAST:event_AddNeighborhoodActionPerformed
    
    //removes the selected neighborhood from the selected list
    private void RemoveNeighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveNeighborhoodActionPerformed
        String selected = SelectedNeighborhoods.getSelectedValue();
        if(selected == null) { return; } //the button was pressed, but nothing
                                         //was selected
        int size = SelectedNeighborhoods.getModel().getSize();
        String entry;       
        String[] newEntries = new String[size - 1];
        int offset = 0;
        //rebuild the list, skipping the selected value
        for (int i = 0; i < size; i++) {
            entry = SelectedNeighborhoods.getModel().getElementAt(i);
            if( entry.equals( selected ) ) { offset = 1; continue; }
            newEntries[i - offset] = entry;
        }
        //reset the list to the new version
        Arrays.sort(newEntries);
        SelectedNeighborhoods.setListData( newEntries );
        
    }//GEN-LAST:event_RemoveNeighborhoodActionPerformed

    //bring up the neighborhood select window
    private void byNeighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byNeighborhoodActionPerformed
        startSplash.setVisible(false);
        neighborhoodSelect.setVisible(true);        
    }//GEN-LAST:event_byNeighborhoodActionPerformed

    //bring up the address selection window
    private void byAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_byAddressActionPerformed
        startSplash.setVisible(false);
        addressSelect.setVisible(true);
    }//GEN-LAST:event_byAddressActionPerformed

    //go back to start window
    private void backButtonNeighborhoodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonNeighborhoodActionPerformed
        neighborhoodSelect.setVisible(false);
        startSplash.setVisible(true);
    }//GEN-LAST:event_backButtonNeighborhoodActionPerformed

    //go back to start window
    private void backButtonAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonAddressActionPerformed
        addressSelect.setVisible(false);
        startSplash.setVisible(true);
    }//GEN-LAST:event_backButtonAddressActionPerformed

    //add all neighborhoods to selected list
    private void addAllNeighborhoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAllNeighborhoodsActionPerformed
        SelectedNeighborhoods.setModel(AllNeighborhoods.getModel());
    }//GEN-LAST:event_addAllNeighborhoodsActionPerformed

    //remove all neighborhoods from selected list
    private void removeAllNeighborhoodsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllNeighborhoodsActionPerformed
        String[] empty = {};
        SelectedNeighborhoods.setListData(empty);
    }//GEN-LAST:event_removeAllNeighborhoodsActionPerformed

    //if a neighborhood is double-clicked, add it to the list
    private void AllNeighborhoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AllNeighborhoodsMouseClicked
        if( evt.getClickCount() == 2 ) {
            String selected = AllNeighborhoods.getSelectedValue();
            int size = SelectedNeighborhoods.getModel().getSize();
            String entry;       
            String[] allEntries = new String[size + 1];
        
            //build a list of everything currently in the selected list
            for (int i = 0; i < size; i++) {
                entry = SelectedNeighborhoods.getModel().getElementAt(i);
                //check to make sure the entry hasn't already been added
                if( entry.equals( selected ) ) { return; }
                allEntries[i] = entry;
            }
            //add the new neighborhood to the end of the list
            allEntries[size] = selected;
            //set the selected list to be the new updated version
            Arrays.sort(allEntries);
            SelectedNeighborhoods.setListData( allEntries );
        }
    }//GEN-LAST:event_AllNeighborhoodsMouseClicked

    private void SelectedNeighborhoodsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SelectedNeighborhoodsMouseClicked
        if( evt.getClickCount() == 2 ) {
            String selected = SelectedNeighborhoods.getSelectedValue();
            int size = SelectedNeighborhoods.getModel().getSize();
            String entry;       
            String[] newEntries = new String[size - 1];
            int offset = 0;
            //rebuild the list, skipping the selected value
            for (int i = 0; i < size; i++) {
                entry = SelectedNeighborhoods.getModel().getElementAt(i);
                if( entry.equals( selected ) ) { offset = 1; continue; }
                newEntries[i - offset] = entry;
            }
            //reset the list to the new version
            Arrays.sort(newEntries);
            SelectedNeighborhoods.setListData( newEntries );   
        }
    }//GEN-LAST:event_SelectedNeighborhoodsMouseClicked

    //NetBeans auto-created this stub, which isn't needed for anything, but NetBeans takes a very dim view of users
    //deleting the stubs it generates, so here it stays
    private void addressSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressSelectComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addressSelectComboBoxActionPerformed

    //add specified addresss to list
    private void addressAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressAddButtonActionPerformed
        String selected = addressSelectComboBox.getSelectedItem().toString();
        if(selected == null) { return; } //the button was pressed, but nothing
                                         //was selected
        int size = selectedAddresses.getModel().getSize();
        String entry;       
        String[] allEntries = new String[size + 1];
        
        //build a list of everything currently in the selected list
        for (int i = 0; i < size; i++) {
            entry = selectedAddresses.getModel().getElementAt(i);
            //check to make sure the entry hasn't already been added
            if( entry.equals( selected ) ) { return; }
            allEntries[i] = entry;
        }
        //add the new neighborhood to the end of the list
        allEntries[size] = selected;
        //set the selected list to be the new updated version
        Arrays.sort(allEntries);
        selectedAddresses.setListData( allEntries );
    }//GEN-LAST:event_addressAddButtonActionPerformed

    //run query on selected parameters
    private void addressesRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressesRunButtonActionPerformed
        String entry, selected, startDate, endDate, addressFormattedString = "";
        String addressQuery = "";
        
        //grab sorting attributes
        int sortColumn, sortOrder;
        String sortColumnString = addressSortColumnSelect.getSelectedItem().toString();
        if( sortColumnString.compareTo("Average Issue Time") == 0 ) {
            sortColumn = 3;
        } else if( sortColumnString.compareTo("Total Issues") == 0 ) {
            sortColumn = 1;
        } else if( sortColumnString.compareTo("Total Issue Time") == 0 ) {
            sortColumn = 2;
        } else { sortColumn = 0; }
        
        String sortOrderString = addressSortDirSelect.getSelectedItem().toString();
        sortOrder = ( sortOrderString.compareTo("Ascending") == 0 ) ? 0 : 1;
        
        int size = selectedAddresses.getModel().getSize();
        ArrayList addresses = new ArrayList(564);
        
        //put together a string of all the selected addresses
        //also make a string to use in the address-specification in the SQL query
        for (int i = 0; i < size; i++) {
            if(i != 0) addressQuery = addressQuery + " OR ";
            entry = selectedAddresses.getModel().getElementAt(i);
            addressQuery = addressQuery + "street = '" + entry +"'";
            //System.out.print(" " + entry);]
            addresses.add(entry);
            addressFormattedString += ( entry );
            if(i < size - 1 ) { addressFormattedString += ", "; }
        }
        
        startDate =  addressStartDate.getText();
        endDate = addressEndDate.getText();
        
        //convert the start and end dates to SQL timestamp format
        //first insert zeroes into start month and day where needed
        if(startDate.indexOf("/") < 2) startDate = "0" + startDate;
        if(endDate.indexOf("/") < 2) endDate = "0" + endDate;
        if(startDate.substring(startDate.indexOf("/") + 1).indexOf("/")  + startDate.indexOf("/") + 1 < 5)
            startDate = startDate.substring(0,3) + "0" + startDate.substring(3);
        if(endDate.substring(endDate.indexOf("/") + 1).indexOf("/")  + endDate.indexOf("/") + 1 < 5)
            endDate = endDate.substring(0,3) + "0" + endDate.substring(3);
        //now rearrange mm/dd/yy to yyyy/mm/dd h
        String startDateSQL = "'20" + startDate.substring(6) + "-" + startDate.substring(0,2) + "-" + startDate.substring(3,5) + " 00:00:00'";
        //need to tell SQL to add a day to end date so end date issues are included
        String endDateSQL = "(timestamp '20" + endDate.substring(6) + "-" + endDate.substring(0,2) + "-" + endDate.substring(3,5) + " 00:00:00' + interval '1 day 00:00:00')";
        
        selected = "";
        
        for(int i = 0; i < selectedAddresses.getModel().getSize(); i++) {
            selected += selectedAddresses.getModel().getElementAt(i) + " ";
        }
        
        System.out.println("You selected the addresses: "  + selected);
        System.out.println("In the date range: " + startDate + " -- " + endDate);
        System.out.println("Sorting by: " + sortColumn + ", " + sortOrder );
        
        //connect to the SQL server
        establishConnection();
        
        //perform the query and store the results in rs
        ResultSet rs = performAddressQuery(startDateSQL, endDateSQL, addressQuery, sortColumn, sortOrder);
        
        //declare the table columns
        LinkedList issues = new LinkedList();
        LinkedList issueNum = new LinkedList();
        LinkedList issueTime = new LinkedList();
        LinkedList issueAvgTime = new LinkedList();
        
        try {
        while (rs.next())
        {
            issues.add(rs.getString("name"));
            issueNum.add(rs.getString("num_issues"));
            issueTime.add(rs.getString("tot_issue_time"));
            issueAvgTime.add(rs.getString("avg_issue_time"));
        }
        } catch(Exception e)
        {
            System.out.println("Problem when analyzing query result.");
        }
        
        //close connection to SQL server
        closeConnection();
        
        Object[][] obj = new Object[issues.size()][4]; //for making the table in the popup
        
        //initialize the table 
        for(int i = 0; i < issues.size(); i++) {
            obj[i][0] = issues.get(i);
            obj[i][1] = issueNum.get(i);
            obj[i][2] = issueTime.get(i);
            obj[i][3] = issueAvgTime.get(i);
        }
        
        nfsLabel.setText("<html>" + addressFormattedString);
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            /*new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            }*/obj,
            new String [] {
                "Issue Type", "Total Issues", "Total Issue Time", "Avg Issue Time"
            })
        ); 
        dateLabel.setText("<html>In the date range: " + startDate + " to " + endDate);
        issuesPopup.setVisible(true);   
    }//GEN-LAST:event_addressesRunButtonActionPerformed

    //remove selected address from list
    private void addressesRemoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressesRemoveSelectedActionPerformed
        String selected = selectedAddresses.getSelectedValue();
        if(selected == null) { return; } //the button was pressed, but nothing
                                         //was selected
        int size = selectedAddresses.getModel().getSize();
        String entry;       
        String[] newEntries = new String[size - 1];
        int offset = 0;
        //rebuild the list, skipping the selected value
        for (int i = 0; i < size; i++) {
            entry = selectedAddresses.getModel().getElementAt(i);
            if( entry.equals( selected ) ) { offset = 1; continue; }
            newEntries[i - offset] = entry;
        }
        //reset the list to the new version
        Arrays.sort(newEntries);
        selectedAddresses.setListData( newEntries );
    }//GEN-LAST:event_addressesRemoveSelectedActionPerformed

    //remove all addresses from list
    private void addressesRemoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addressesRemoveAllActionPerformed
        String[] empty = {};
        selectedAddresses.setListData(empty);
    }//GEN-LAST:event_addressesRemoveAllActionPerformed

    //contact server
    public void establishConnection()
    {
        if (connection != null)
            return;
        String url = "jdbc:postgresql://50.177.247.244:5432/scf_data";
        try
        {
           Class.forName("org.postgresql.Driver");
          
           
           connection = DriverManager.getConnection(url, username, password);
           
           if (connection != null) {
               System.out.println("Connected to database.");
           }
        } catch(Exception e){
            System.out.println("Problem when connecting to the database");
        }
    }
    
    //run query
    public ResultSet performQuery(String startDate, String endDate, String nbhdQuery, int sortColumn, int sortOrder){
        ResultSet rs = null;
        Statement s = null;
        try
        {
            s = connection.createStatement();
            
            String queryString = "WITH req_times(id, time) AS "
                    + "(SELECT request_type_id, (closed_at - created_at) AS issue_time "
                    + "FROM ((SELECT request_type_id, neighborhood, created_at, " + endDate + " AS closed_at "
                    + "FROM issues "
                    + "WHERE created_at >= " + startDate + " AND created_at < " + endDate + " "
                    + "AND (closed_at IS NULL OR closed_at >= " + endDate + ")) "
                    + "UNION "
                    + "(SELECT request_type_id, neighborhood, created_at, closed_at "
                    + "FROM issues "
                    + "WHERE created_at >= " + startDate + " AND created_at < " + endDate + " "
                    + "AND closed_at IS NOT NULL AND closed_at < " + endDate + ")) AS issue_timestamps "
                    + "WHERE " + nbhdQuery + ") "
                    + "SELECT name, num_issues, tot_issue_time, (tot_issue_time/num_issues) AS avg_issue_time "
                    + "FROM request_types, (SELECT id, COUNT(*) AS num_issues, SUM(time) AS tot_issue_time "
                    + "FROM req_times "
                    + "GROUP BY id) AS issue_group "
                    + "WHERE request_types.id = issue_group.id "
                    + "ORDER BY ";
            
            //figure out sortColumn and sortOrder
            switch(sortColumn) {
                case 0: queryString += "name "; break;
                case 1: queryString += "num_issues "; break;
                case 2: queryString += "tot_issue_time "; break;
                case 3: queryString += "avg_issue_time "; break;
                default: queryString += "Invalid Sort Column"; break;
            }
            
            if(sortOrder==0) queryString += "ASC";
            else queryString+= "DESC";
            //System.out.println(queryString);
            
            rs = s.executeQuery(queryString);
        }catch(Exception e)
        {
            System.out.println("Problem in querying the database");
        }
        return rs;
    }
    
        public ResultSet performAddressQuery(String startDate, String endDate, String addressQuery, int sortColumn, int sortOrder){
        ResultSet rs = null;
        Statement s = null;
        try
        {
            s = connection.createStatement();
            
            String queryString = "WITH req_times(id, time) AS "
                    + "(SELECT request_type_id, (closed_at - created_at) AS issue_time "
                    + "FROM ((SELECT request_type_id, street, created_at, " + endDate + " AS closed_at "
                    + "FROM issues "
                    + "WHERE created_at >= " + startDate + " AND created_at < " + endDate + " "
                    + "AND (closed_at IS NULL OR closed_at >= " + endDate + ")) "
                    + "UNION "
                    + "(SELECT request_type_id, street, created_at, closed_at "
                    + "FROM issues "
                    + "WHERE created_at >= " + startDate + " AND created_at < " + endDate + " "
                    + "AND closed_at IS NOT NULL AND closed_at < " + endDate + ")) AS issue_timestamps "
                    + "WHERE " + addressQuery + ") "
                    + "SELECT name, num_issues, tot_issue_time, (tot_issue_time/num_issues) AS avg_issue_time "
                    + "FROM request_types, (SELECT id, COUNT(*) AS num_issues, SUM(time) AS tot_issue_time "
                    + "FROM req_times "
                    + "GROUP BY id) AS issue_group "
                    + "WHERE request_types.id = issue_group.id "
                    + "ORDER BY ";
            
            //figure out sortColumn and sortOrder
            switch(sortColumn) {
                case 0: queryString += "name "; break;
                case 1: queryString += "num_issues "; break;
                case 2: queryString += "tot_issue_time "; break;
                case 3: queryString += "avg_issue_time "; break;
                default: queryString += "Invalid Sort Column"; break;
            }
            
            if(sortOrder==0) queryString += "ASC";
            else queryString+= "DESC";
            //System.out.println(queryString);
            
            rs = s.executeQuery(queryString);
        }catch(Exception e)
        {
            System.out.println("Problem in querying the database");
        }
        return rs;
    }
    
    public void closeConnection()
    {
        try
        {
            connection.close();
            connection = null;
            System.out.println("Connection closed.");
        }catch(Exception e)
        {
            System.out.println("Problem closing the connection to the database");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SeeClickFixUI ui = new SeeClickFixUI();
                ui.setVisible(true);
                ui.addressSelect.setVisible(false);
                ui.neighborhoodSelect.setVisible(false);
                ui.startSplash.setVisible(true);
                
            }
        });
    }

    private String username = "postgres";
    private String password = "";
    private Connection connection = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddNeighborhood;
    private javax.swing.JList<String> AllNeighborhoods;
    private datechooser.beans.DateChooserCombo EndDateSelector;
    private javax.swing.JButton RemoveNeighborhood;
    private javax.swing.JButton RunButton;
    private javax.swing.JList<String> SelectedNeighborhoods;
    private datechooser.beans.DateChooserCombo StartDateSelector;
    private javax.swing.JButton addAllNeighborhoods;
    private javax.swing.JButton addressAddButton;
    private datechooser.beans.DateChooserCombo addressEndDate;
    private javax.swing.JPanel addressSelect;
    private javax.swing.JComboBox<String> addressSelectComboBox;
    private javax.swing.JLabel addressSelectPrompt;
    private javax.swing.JComboBox<String> addressSortColumnSelect;
    private javax.swing.JComboBox<String> addressSortDirSelect;
    private datechooser.beans.DateChooserCombo addressStartDate;
    private javax.swing.JButton addressesRemoveAll;
    private javax.swing.JButton addressesRemoveSelected;
    private javax.swing.JButton addressesRunButton;
    private javax.swing.JButton backButtonAddress;
    private javax.swing.JButton backButtonNeighborhood;
    private javax.swing.JButton byAddress;
    private javax.swing.JButton byNeighborhood;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JDialog issuesPopup;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private java.awt.Label label1;
    private javax.swing.JPanel neighborhoodSelect;
    private javax.swing.JComboBox<String> neighborhoodSortColumnSelect;
    private javax.swing.JComboBox<String> neighborhoodSortDirSelect;
    private javax.swing.JLabel nfsLabel;
    private javax.swing.JButton removeAllNeighborhoods;
    private javax.swing.JTable resultsTable;
    private javax.swing.JList<String> selectedAddresses;
    private javax.swing.JPanel startSplash;
    // End of variables declaration//GEN-END:variables
}